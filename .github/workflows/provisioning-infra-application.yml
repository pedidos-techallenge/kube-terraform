name: Orchestrate Terraform Workflows

on:
  workflow_dispatch:

env:
  GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}

jobs:
  create-s3-bucket:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: 'us-east-1'

      - name: Create S3 Bucket
        run: |
          aws s3api create-bucket --bucket $BUCKET_NAME --region us-east-1

      - name: Attach Bucket Policy
        run: |
          aws s3api put-bucket-policy --bucket $BUCKET_NAME --policy '{
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Effect": "Allow",
                      "Principal": {
                          "AWS": "arn:aws:iam::117590171476:role/LabRole"
                      },
                      "Action": "s3:*",
                      "Resource": [
                          "arn:aws:s3:::$BUCKET_NAME",
                          "arn:aws:s3:::$BUCKET_NAME/*"
                      ]
                  }
              ]
          }'
  
  network:
   name: Trigger Network Workflow
   runs-on: ubuntu-latest
   needs: create-s3-bucket
   steps:
      - name: Trigger Network Terraform Apply
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: 'pedidos-techallenge',
              repo: 'infra',
              workflow_id: 'deploy.yaml', 
              ref: 'main',
              headers: {
                Authorization: `Bearer ${process.env.GITHUB_TOKEN}`
              }
            });

  rds:
    name: Trigger RDS Workflow
    runs-on: ubuntu-latest
    needs: network
    steps:
      - name: Trigger RDS Terraform Apply
        uses: actions/github-script@v6
        with:
          script: |
            const response = await github.rest.actions.createWorkflowDispatch({
              owner: 'pedidos-techallenge',
              repo: 'database-terraform',
              workflow_id: 'deploy.yaml',
              ref: 'build-orchestrator',
              headers: {
                Authorization: `Bearer ${process.env.GITHUB_TOKEN}`
              }
            });

            console.log('Workflow dispatched, checking status...');
            return response;

      - name: Wait and Check Workflow Status
        uses: actions/github-script@v6
        with:
          script: |
            async function getWorkflowRunStatus() {
              let status = 'in_progress';
              let runId = null;
              let attempt = 0;

              while (status === 'in_progress' && attempt < 20) {
                const runs = await github.rest.actions.listWorkflowRuns({
                  owner: 'pedidos-techallenge',
                  repo: 'database-terraform',
                  workflow_id: 'deploy.yaml',
                  branch: 'build-orchestrator',
                });

                if (runs.data.workflow_runs.length > 0) {
                  runId = runs.data.workflow_runs[0].id;
                  status = runs.data.workflow_runs[0].status;
                  console.log(`Workflow status: ${status}`);
                }

                if (status === 'in_progress') {
                  console.log('Waiting for 30 seconds before checking again...');
                  await new Promise(resolve => setTimeout(resolve, 30000)); // wait for 30 seconds
                }

                attempt++;
              }

              if (runId && status !== 'completed') {
                throw new Error(`Workflow run did not complete within the timeout period. Status: ${status}`);
              }

              const result = await github.rest.actions.getWorkflowRun({
                owner: 'pedidos-techallenge',
                repo: 'database-terraform',
                run_id: runId,
              });

              if (result.data.conclusion !== 'success') {
                throw new Error(`Workflow failed with conclusion: ${result.data.conclusion}`);
              }

              console.log('Workflow completed successfully.');
            }

            await getWorkflowRunStatus();

  eks:
    name: Trigger EKS Workflow
    runs-on: ubuntu-latest
    needs: rds 
    steps:
      - name: Trigger EKS Terraform Apply
        uses: actions/github-script@v6
        with:
          script: |
            const response = await github.rest.actions.createWorkflowDispatch({
              owner: 'pedidos-techallenge',
              repo: 'kube-terraform',
              workflow_id: 'provisioning-cluster-eks-fargate.yml',
              ref: 'main',
              headers: {
                Authorization: `Bearer ${process.env.GITHUB_TOKEN}`
              }
            });

            console.log('Workflow dispatched, checking status...');
            return response;

      - name: Wait and Check Workflow Status
        uses: actions/github-script@v6
        with:
          script: |
            async function getWorkflowRunStatus() {
              let status = 'in_progress';
              let runId = null;
              let attempt = 0;

              while (status === 'in_progress' && attempt < 20) {
                const runs = await github.rest.actions.listWorkflowRuns({
                  owner: 'pedidos-techallenge',
                  repo: 'kube-terraform',
                  workflow_id: 'provisioning-cluster-eks-fargate.yml',
                  branch: 'new-workflow',
                });

                if (runs.data.workflow_runs.length > 0) {
                  runId = runs.data.workflow_runs[0].id;
                  status = runs.data.workflow_runs[0].status;
                  console.log(`Workflow status: ${status}`);
                }

                if (status === 'in_progress') {
                  console.log('Waiting for 30 seconds before checking again...');
                  await new Promise(resolve => setTimeout(resolve, 30000)); // wait for 30 seconds
                }

                attempt++;
              }

              if (runId && status !== 'completed') {
                throw new Error(`Workflow run did not complete within the timeout period. Status: ${status}`);
              }

              const result = await github.rest.actions.getWorkflowRun({
                owner: 'pedidos-techallenge',
                repo: 'database-terraform',
                run_id: runId,
              });

              if (result.data.conclusion !== 'success') {
                throw new Error(`Workflow failed with conclusion: ${result.data.conclusion}`);
              }

              console.log('Workflow completed successfully.');
            }

            await getWorkflowRunStatus();